package org.opentestsystem.ap.tms.packager.manager;

import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.tms.packager.mapper.TestPackageMapper;
import org.opentestsystem.ap.tms.packager.model.saaif.ItemMetaData;
import org.opentestsystem.ap.tms.packager.model.xlsx.TestPackageSheet;
import org.opentestsystem.ap.tms.packager.model.xlsx.TestPackageSheetNames;
import org.opentestsystem.ap.tms.packager.model.xlsx.TestPackageWorkbook;
import org.opentestsystem.ap.tms.packager.util.ItemUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.xml.sax.SAXException;
import tds.support.tool.testpackage.configuration.TestPackageObjectMapperConfiguration;
import tds.testpackage.model.TestPackage;

import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Validator;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import java.util.Optional;

@Component
public class FixedFormPackagerManager {
    private final XmlMapper xmlMapper;

    private final Validator schemaValidator;

    private final ItemUtil itemUtil;

    @Autowired
    public FixedFormPackagerManager(final TestPackageObjectMapperConfiguration configuration,
                                    final ItemUtil itemUtil) throws SAXException {
        this.xmlMapper = configuration.getLegacyTestSpecXmlMapper();
        this.schemaValidator = configuration.getTestPackageSchemaValidator();
        this.itemUtil = itemUtil;
    }

    public Optional<File> generateFixedFormPackage(final String inputSpreadsheetPath,
                                                   final String outputFilePath,
                                                   final boolean debug) {
        final TestPackageWorkbook testPackageWorkbook = createTestPackageWorkbook(inputSpreadsheetPath);
        final String bankKey = getBankKey(testPackageWorkbook.getSheet(TestPackageSheetNames.PACKAGE));
        final String[] items = getItemIds(bankKey, testPackageWorkbook.getSheet(TestPackageSheetNames.SEGMENT_FORMS));

        final Map<String, ItemMetaData> itemMetaData = itemUtil.getItemMetaData(Arrays.asList(items));

        final TestPackage testPackage = TestPackageMapper.map(testPackageWorkbook, itemMetaData);
        final String outputFileFullPath = outputFilePath + File.separator + testPackage.getId() + ".xml";

        try {
            createAndValidateTestPackageFile(outputFileFullPath, testPackage, debug);
            System.out.println("Successfully created the fixed form test package " + testPackage.getId() + ".xml");
        } catch (IOException e) {
            throw new RuntimeException(String.format("An exception occurred while creating the file %s", outputFileFullPath), e);
        }

        return Optional.of(new File(outputFileFullPath));
    }

    private static String getBankKey(final TestPackageSheet sheet) {
        return sheet.getString("BankKey");
    }

    private static String[] getItemIds(final String bankKey, final TestPackageSheet sheet) {
//        final String[] itemIds = sheet.getStrings("ItemId");
//
//        // Item IDs in the input file do not include the bank key - but the items are keyed by the entire item key (which is
//        // prefixed by the bank key) in gitlab
//        for (int i = 0; i < itemIds.length; i++) {
//            itemIds[i] = String.format("%s-%s", bankKey, itemIds[i]);
//        }
//
//        return itemIds;
        return sheet.getStrings("ItemId");
    }

    private TestPackageWorkbook createTestPackageWorkbook(final String inputSpreadsheetPath) {
        try {
            return new TestPackageWorkbook(new XSSFWorkbook(new FileInputStream(inputSpreadsheetPath)));
        } catch (IOException e) {
            throw new RuntimeException("Error reading test package spreadsheet.", e);
        }
    }

    private void createAndValidateTestPackageFile(final String outputFilePath, final TestPackage testPackage,
                                                  final boolean debug) throws IOException {
        final File testPackageFile = new File(outputFilePath);
        xmlMapper.writeValue(testPackageFile, testPackage);

        try (FileInputStream fis = new FileInputStream(testPackageFile)) {
            final StreamSource xmlFile = new StreamSource(fis);
            schemaValidator.validate(xmlFile);
            testPackageFile.createNewFile();
        } catch (SAXException e) {
            System.out.println("Error during XSD validation of the test package " + testPackage.getId());

            if (debug) {
                e.printStackTrace();
            }
        }
    }
}
