package org.opentestsystem.ap.tms.packager.model;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.transformer.MapperUtil;
import org.opentestsystem.ap.tms.packager.mapper.ContentSpecFormatConverter;

@Slf4j
public class ItemMetaDataUtil {

    private final Item utilItem;

    public ItemMetaDataUtil(AssessmentItem item) {
        this.utilItem = item;

    }

    /**
     * Retrieves primary standard from standard publication in enhanced format if available, or legacy if not.
     *
     * @return content spec ID in legacy or enhanced format
     * @throws SystemException if no primary standard ID exists in either format.
     */
    private String getRawPrimaryStandard() {
        if (containsEnhancedOrLegacyId(utilItem.getServerManaged().getPrimaryEnhancedId())) {
            return utilItem.getServerManaged().getPrimaryEnhancedId();
        }
        if (containsEnhancedOrLegacyId(utilItem.getServerManaged().getPrimaryLegacyId())) {
            return utilItem.getServerManaged().getPrimaryLegacyId();
        }
        if (containsEnhancedOrLegacyId(utilItem.getServerManaged().getPrimaryLegacyV4Id())) {
            return utilItem.getServerManaged().getPrimaryLegacyV4Id();
        }

        throw new SystemException("No PrimaryStandard found in metadata");
    }

    /**
     * Retrieves primary standard from standard publication in legacy format for usage in downstream processing that
     * relies on the legacy format. The returned value is either converted from the enhanced primary standard ID if it
     * exists, or just taken from the legacy format primary standard in there is no enhanced standard publication.
     *
     * @return content spec ID in legacy format
     * @throws SystemException if no primary standard ID exists in the metadata.
     */
    public String getPrimaryStandard() {
        return ContentSpecFormatConverter
            .convertEnhancedToLegacy(getRawPrimaryStandard())
            .orElse(null);
    }

    public String getStatus() {
        return utilItem.getWorkflow().getWorkflowStatusCode();
    }

    public String getDepthOfKnowledge() {
        return utilItem.getCore().getMetadata().getDepthOfKnowledge();
    }

    public String getIntendedGrade() {
        return utilItem.getCore().getMetadata().getIntendedGrade();
    }

    public String getScoringEngine() {
        return MapperUtil.getScoringEngineMetadataValue(utilItem.getCore().getMetadata().getScoringEngine());
    }

    public String getASL() {
        return MapperUtil.getAccessibilityTagsASLLanguage(utilItem);
    }

    public String getBraille() {
        return MapperUtil.getBrailleType(utilItem.getBraille());
    }

    private boolean containsEnhancedOrLegacyId(String id) {
        return id.startsWith("M.") ||
            id.startsWith("E.") ||
            id.contains("-v6:") ||
            id.contains("-v1:");
    }

}
