package org.opentestsystem.ap.tms.packager.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.ItemContext;
import org.opentestsystem.ap.common.saaif.transformer.ModelTransformer;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.util.ImageGenerator;
import org.opentestsystem.ap.tms.packager.model.saaif.ItemMetaData;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Component
public class ItemUtil {

    private ItemManager itemManager;

    private TransformerFactory transformerFactory;

    private ImageGenerator imageGenerator;

    private ItemBankProperties itemBankProperties;

    private AppAssembler assembler;

    private PackagerFileUtil packagerFileUtil;

    private final String UTF_8_ENCODING = "UTF-8";

    private final String ITEM_FILENAME_PREFIX = "item";

    public ItemUtil(ItemManager itemManager,
                    TransformerFactory transformerFactory,
                    ImageGenerator imageGenerator,
                    ItemBankProperties itemBankProperties,
                    AppAssembler assembler,
                    PackagerFileUtil packagerFileUtil) {
        this.itemManager = itemManager;
        this.transformerFactory = transformerFactory;
        this.imageGenerator = imageGenerator;
        this.itemBankProperties = itemBankProperties;
        this.assembler = assembler;
        this.packagerFileUtil = packagerFileUtil;
    }

    public Map<String, ItemMetaData> getItemMetaData(List<String> itemIds) {
        final HashMap<String, ItemMetaData> timsItems = new HashMap<>();

        itemIds.forEach(itemId -> {
            if (StringUtils.isNotBlank(itemId)) {
                try {
                    Item item = itemManager.findCurrentItem(itemId);

                    String tempDir = packagerFileUtil.createTempDirectory();

                    ItemContext ctx = new ItemContext(item.getId(),
                            item.getLegacyId(itemBankProperties.getBankKey()),
                            itemBankProperties.getBankKey(), assembler, Paths.get(tempDir));

                    final ModelTransformer transformer = transformerFactory.newTransformer(item.getType(), this.imageGenerator);
                    transformer.generateSaaifFiles(item, itemBankProperties.getBankKey(), ctx);

                    timsItems.put(itemId,
                            new ItemMetaData(
                                    FileUtils.readFileToString(ctx.getLocalMetadataFilePath().toFile(), UTF_8_ENCODING),
                                    this.assembler.getSaaifAssembler().readXmlFromFile(ctx.getLocalItemFilePath(ITEM_FILENAME_PREFIX))
                            ));
                } catch (IOException ex) {
                    log.error(String.format("Error retrieving Item: %s", itemId));
                }
            }
        });

        return timsItems;
    }

}
