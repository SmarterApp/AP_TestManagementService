package org.opentestsystem.ap.tms.packager.model.saaif;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.saaif.transformer.MapperUtil;
import org.opentestsystem.ap.tms.packager.mapper.ContentSpecFormatConverter;

@Slf4j
public class ItemMetaDataUtil {

    private final Item utilItem;


    //    private final Document xmlDocument;
    //    private final XPath xPath;
    //
    //    private final List<XPathExpression> searchExpressions;

    //    private final Logger log = LoggerFactory.getLogger(ItemMetaDataUtil.class);

    public ItemMetaDataUtil(Item item) {
        utilItem = item;

        //        try {
        //            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
        //            DocumentBuilder builder = builderFactory.newDocumentBuilder();
        //            this.xmlDocument = builder.parse(new InputSource(new StringReader(itemMeta)));
        //            this.xPath = XPathFactory.newInstance().newXPath();
        //            this.searchExpressions = new ArrayList<>();
        //            initSearchExpressions();
        //        } catch (Exception e) {
        //            throw new SystemException("Could not parse item metadata XML.", e);
        //        }
    }

    // Sets up the XPath expressions in the order of precedence. First looks for enhanced, then legacy.
    //    private void initSearchExpressions() {
    //        String [] searchStrings = {
    //                "metadata/smarterAppMetadata/StandardPublication/PrimaryStandard[starts-with(.,'M.')]",
    //                "metadata/smarterAppMetadata/StandardPublication/PrimaryStandard[starts-with(.,'E.')]",
    //                "metadata/smarterAppMetadata/StandardPublication/PrimaryStandard[contains(.,'-v6:')]",
    //                "metadata/smarterAppMetadata/StandardPublication/PrimaryStandard[contains(.,'-v1:')]"
    //        };
    //
    //        searchExpressions.addAll(Arrays.stream(searchStrings)
    //                .map(this::compileXpath)
    //                .filter(Objects::nonNull)
    //                .collect(Collectors.toList()));
    //    }

    //    private XPathExpression compileXpath(String expression) {
    //        try {
    //            return this.xPath.compile(expression);
    //        } catch (XPathExpressionException e) {
    //            log.error("Cannot compile XPath expression: " + expression, e);
    //        }
    //
    //        return null;
    //    }

    //    public NodeList xpathQuery(String expression) {
    //        try {
    //            return (NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET);
    //        } catch (XPathExpressionException e) {
    //            throw new SystemException("XPath expression " + expression + " failed.", e);
    //        }
    //    }

    //    private XPathExpression compileXpath(String expression) {
    //        try {
    //            return this.xPath.compile(expression);
    //        } catch (XPathExpressionException e) {
    //            log.error("Cannot compile XPath expression: " + expression, e);
    //        }
    //
    //        return null;
    //    }
    //
    //    public NodeList xpathQuery(String expression) {
    //        try {
    //            return (NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET);
    //        } catch (XPathExpressionException e) {
    //            throw new SystemException("XPath expression " + expression + " failed.", e);
    //        }
    //    }

    /**
     * Retrieves primary standard from standard publication in enhanced format if available, or legacy if not.
     *
     * @return content spec ID in legacy or enhanced format
     * @throws SystemException if no primary standard ID exists in either format.
     */
    private String getRawPrimaryStandard() {
        //        return searchExpressions.stream()
        //                .map(this::evaluate)
        //                .filter(nodeList -> nodeList.getLength() != 0)
        //                .map(nodeList -> nodeList.item(0).getTextContent())
        //                .findFirst()
        //                .orElseThrow(() -> new SystemException("No PrimaryStandard found in metadata"));
        if (containsEnhancedOrLegacyId(utilItem.getServerManaged().getPrimaryEnhancedId())) {
            return utilItem.getServerManaged().getPrimaryEnhancedId();
        }
        if (containsEnhancedOrLegacyId(utilItem.getServerManaged().getPrimaryLegacyId())) {
            return utilItem.getServerManaged().getPrimaryLegacyId();
        }
        if (containsEnhancedOrLegacyId(utilItem.getServerManaged().getPrimaryLegacyV4Id())) {
            return utilItem.getServerManaged().getPrimaryLegacyV4Id();
        }

        throw new SystemException("No PrimaryStandard found in metadata");
    }

    /**
     * Retrieves primary standard from standard publication in legacy format for usage in downstream processing that
     * relies on the legacy format. The returned value is either converted from the enhanced primary standard ID if it
     * exists, or just taken from the legacy format primary standard in there is no enhanced standard publication.
     *
     * @return content spec ID in legacy format
     * @throws SystemException if no primary standard ID exists in the metadata.
     */
    public String getPrimaryStandard() {
        return ContentSpecFormatConverter
            .convertEnhancedToLegacy(getRawPrimaryStandard())
            .orElse(null);
    }

    //    private NodeList evaluate(XPathExpression expression) {
    //        try {
    //            return (NodeList)expression.evaluate(this.xmlDocument, XPathConstants.NODESET);
    //        } catch (XPathExpressionException e) {
    //            throw new SystemException("XPath expression failed. Could not retrieve PrimaryStandard. ", e);
    //        }
    //    }

    //    public String getIrtElement(final String elementName, final int index) {
    //        final String expression = "metadata/smarterAppMetadata/IrtDimension/" + elementName;
    //        try {
    //            return ((NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET)).item(index).getTextContent();
    //        } catch (XPathExpressionException e) {
    //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve IrtModelType. ", e);
    //        }
    //    }
    //
    //    public int getIrtDimensionCount() {
    //        final String expression = "metadata/smarterAppMetadata/IrtDimension";
    //        try {
    //            return ((NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET)).getLength();
    //        } catch (XPathExpressionException e) {
    //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve IrtDimension count. ", e);
    //        }
    //    }
    //
    //    public NodeList getIrtParameters(final int dimensionIndex) {
    //        return this.xpathQuery("metadata/smarterAppMetadata/IrtDimension[" + dimensionIndex + "]/IrtParameter");
    //    }

    public String getStatus() {
        //        final String expression = "metadata/smarterAppMetadata/Status";
        //        try {
        //            return ((NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET)).item(0).getTextContent();
        //        } catch (XPathExpressionException e) {
        //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve Status. ", e);
        //        }
        return utilItem.getWorkflow().getWorkflowStatusCode();
    }

    public String getDepthOfKnowledge() {
        //        final String expression = "metadata/smarterAppMetadata/DepthOfKnowledge";
        //        try {
        //            return ((NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET)).item(0).getTextContent();
        //        } catch (XPathExpressionException e) {
        //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve Depth of Knowledge. ", e);
        //        }
        return utilItem.getCore().getMetadata().getDepthOfKnowledge();
    }

    public String getIntendedGrade() {
        //        final String expression = "metadata/smarterAppMetadata/IntendedGrade";
        //        try {
        //            return ((NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET)).item(0).getTextContent();
        //        } catch (XPathExpressionException e) {
        //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve IntendedGrade. ", e);
        //        }
        return utilItem.getCore().getMetadata().getIntendedGrade();
    }

    public String getScoringEngine() {
        //        final String expression = "metadata/smarterAppMetadata/ScoringEngine";
        //        try {
        //            return ((NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET)).item(0).getTextContent();
        //        } catch (XPathExpressionException e) {
        //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve ScoringEngine. ", e);
        //        }
        return MapperUtil.getScoringEngineMetadataValue(utilItem.getCore().getMetadata().getScoringEngine());
    }

    public String getASL() {
        //        final String expression = "metadata/smarterAppMetadata/AccessibilityTagsASLLanguage";
        //        try {
        //            NodeList nl = (NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET);
        //            if(nl.getLength() == 0) {
        //                return "N";
        //            }
        //            return nl.item(0).getTextContent();
        //        } catch (XPathExpressionException e) {
        //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve AccessibilityTagsASLLanguage. ", e);
        //        }
        return MapperUtil.getAccessibilityTagsASLLanguage(utilItem);
    }

    public String getBraille() {
        //        final String expression = "metadata/smarterAppMetadata/BrailleType";
        //        try {
        //            final String brailleType = ((NodeList) this.xPath.compile(expression).evaluate(this.xmlDocument, XPathConstants.NODESET)).item(0).getTextContent();
        //            return brailleType.split("_")[0];
        //        } catch (XPathExpressionException e) {
        //            throw new SystemException("XPath expression " + expression + " failed. Could not retrieve AccessibilityTagsASLLanguage. ", e);
        //        }
        return MapperUtil.getBrailleType(utilItem.getBraille());
    }

    private boolean containsEnhancedOrLegacyId(String id) {
        return id.startsWith("M.") ||
            id.startsWith("E.") ||
            id.contains("-v6:") ||
            id.contains("-v1:");
    }


}
