package org.opentestsystem.ap.tms.service;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.tms.model.Test;
import org.opentestsystem.ap.tms.model.TestPackage;
import org.opentestsystem.ap.tms.model.TestPackageConstants;

public class PackageMetadataGenerator {
    private static final String HighSchool = "High School";

    static void updatePackageWithGeneratedData(final TestPackage testPackage){
        testPackage.setId(generatePackageId(testPackage));
        testPackage.setLabel(generatePackageLabel(testPackage));

        int testIdCounter = 1;
        final String grade = TestPackageConstants.PackageSubtype.IAB.equalsIgnoreCase(testPackage.getSubType()) && "11".equals(testPackage.getGrade()) ? HighSchool : testPackage.getGrade();

        for (Test test : testPackage.getTests()) {
            String label;
            if(testPackage.getTests().size() > 1) {
                label = "Grade " + grade + " " + testPackage.getSubject() + " - " + testPackage.getTitle();
                test.setId(testPackage.getId() + "-" + testIdCounter);
            } else {
                label = "Grade " + grade + " " + testPackage.getSubject() + " - " + test.getSuffix();
                test.setId(testPackage.getId());
            }

            if(StringUtils.isNotBlank(testPackage.getSubType())) {
                label += " " + testPackage.getSubType();
            }

            test.setLabel(label);
            testIdCounter++;
        }
    }

    /**
     * Generates a package id from the test package data
     *
     * @param testPackage {@link TestPackage}
     * @return the package id
     */
    static String generatePackageId(final TestPackage testPackage) {
        String packageId;
        switch (testPackage.getType()) {
            case TestPackageConstants.PackageType.Interim:
                packageId = TestPackageConstants.Publisher + "-" + testPackage.getSubType() + "-" + testPackage
                    .getSubject() + "-" + testPackage.getTitle();
                break;
            case TestPackageConstants.PackageType.Summative:
                packageId = TestPackageConstants.Publisher + "-OP-" + testPackage.getSubject() + "-" + testPackage
                    .getTitle();
                break;
            case TestPackageConstants.PackageType.Practice:
            case TestPackageConstants.PackageType.Other:
                packageId = TestPackageConstants.Publisher + "-" + testPackage.getTitle() + "-" + testPackage
                    .getSubject();
                break;
            default:
                throw new SystemException("Invalid package type " + testPackage.getType());
        }

        packageId += "-" + testPackage.getGrade() + "-" + testPackage.getYear();

        if (StringUtils.isNotBlank(testPackage.getSuffix())) {
            packageId += "-" + testPackage.getSuffix();
        }

        return packageId;
    }

    /**
     * Generates a package label from the test package data
     *
     * @param testPackage {@link TestPackage}
     * @return the package label
     */
    static String generatePackageLabel(final TestPackage testPackage) {
        String label = "Grade " + testPackage.getGrade() + " " + testPackage.getSubject() + " - " + testPackage
            .getTitle();

        if (StringUtils.isNotBlank(testPackage.getSubType())) {
            label += " " + testPackage.getSubType();
        }

        label += " - " + testPackage.getYear();

        return label;
    }


}
