package org.opentestsystem.ap.tms.service;

import org.apache.commons.lang.StringUtils;
import org.jetbrains.annotations.NotNull;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.common.security.SecurityUtil;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.tms.model.TestPackage;
import org.opentestsystem.ap.tms.model.TestPackageCommit;
import org.opentestsystem.ap.tms.model.TestPackageEntity;
import org.opentestsystem.ap.tms.model.TestPackageResponse;
import org.opentestsystem.ap.tms.repository.TestPackageRepository;
import org.springframework.stereotype.Service;

import java.util.Optional;

import static org.apache.commons.lang.StringUtils.isBlank;

@Service
public class DefaultTestPackageService implements TestPackageService {
    private final TestPackageRepository testPackageRepository;

    public DefaultTestPackageService(final TestPackageRepository testPackageRepository) {
        this.testPackageRepository = testPackageRepository;
    }

    @NotNull
    @Override
    public TestPackageResponse create(final TestPackage testPackage) {
        ItemBankUser itemBankUser = SecurityUtil.getItemBankUser();
        validateAndUpdateGeneratedFields(testPackage);
        TestPackageEntity existingTestPackageEntity = testPackageRepository.findByPackageId(testPackage.getId());

        if (existingTestPackageEntity != null) {
            throw new ValidationException("Test package already present with the supplied test package id");
        }

        TestPackageEntity entity = TestPackageEntity.builder()
            .packageId(testPackage.getId())
            .beingCreated(true)
            .locked(true)
            .testPackage(testPackage)
            .insertedBy(itemBankUser.getUserName())
            .build();

        return convert(testPackageRepository.save(entity));
    }

    @NotNull
    @Override
    public TestPackageResponse save(final String packageId, final TestPackage testPackage) {
        ItemBankUser itemBankUser = SecurityUtil.getItemBankUser();
        validateAndUpdateGeneratedFields(testPackage);

        TestPackageEntity existingTestPackageEntity = testPackageRepository.findByPackageId(packageId);
        validateEntity(itemBankUser, existingTestPackageEntity);

        if (existingTestPackageEntity == null) {
            throw new ValidationException("Test package being saved does not exist");
        }

        TestPackageEntity entity = TestPackageEntity.builder()
            .packageId(existingTestPackageEntity.getPackageId())
            .beingCreated(existingTestPackageEntity.isBeingCreated())
            .locked(existingTestPackageEntity.isLocked())
            .testPackage(testPackage)
            .insertedBy(itemBankUser.getUserName())
            .build();

        return convert(testPackageRepository.save(entity));
    }

    @NotNull
    @Override
    public Optional<TestPackageResponse> find(final String testPackageId) {
        TestPackageEntity existingTestPackageEntity = testPackageRepository.findByPackageId(testPackageId);

        if (existingTestPackageEntity == null) {
            return Optional.empty();
        }

        if (existingTestPackageEntity.isBeingCreated() && !SecurityUtil.getItemBankUser().getUserName()
            .equals(existingTestPackageEntity.getInsertedBy())) {
            //Only the user creating the package can see it
            return Optional.empty();
        }

        if(existingTestPackageEntity.isLocked() && !SecurityUtil.getItemBankUser().getUserName()
            .equals(existingTestPackageEntity.getInsertedBy())) {
            //If an item is not being created and locked but the user is not the one edit return the last not locked record
            existingTestPackageEntity = testPackageRepository.findNonEditedByPackageId(testPackageId);
        }

        if(existingTestPackageEntity == null) {
            throw new SystemException("Data is corrupted for test package " + testPackageId);
        }

        return Optional.of(convert(existingTestPackageEntity));
    }

    @NotNull
    @Override
    public TestPackageResponse lock(final String testPackageId) {
        TestPackageEntity existingTestPackageEntity = testPackageRepository.findByPackageId(testPackageId);

        if (existingTestPackageEntity == null) {
            throw new ValidationException("Test package does not exist");
        }

        if (existingTestPackageEntity.isLocked()) {
            throw new ValidationException("Test package is already locked for edit");
        }

        TestPackageEntity entity = TestPackageEntity.builder()
            .beingCreated(existingTestPackageEntity.isBeingCreated())
            .locked(true)
            .testPackage(existingTestPackageEntity.getTestPackage())
            .insertedBy(SecurityUtil.getItemBankUser().getUserName())
            .build();

        return convert(testPackageRepository.save(entity));
    }

    @NotNull
    @Override
    public TestPackageResponse commit(final TestPackageCommit testPackageCommit) {
        ItemBankUser itemBankUser = SecurityUtil.getItemBankUser();
        final TestPackage testPackage = testPackageCommit.getTestPackage();
        validateAndUpdateGeneratedFields(testPackage);

        TestPackageEntity existingTestPackageEntity = testPackageRepository.findByPackageId(testPackage.getId());
        validateEntity(itemBankUser, existingTestPackageEntity);

        TestPackageEntity entity = TestPackageEntity.builder()
            .beingCreated(false)
            .locked(false)
            .testPackage(testPackage)
            .message(testPackageCommit.getCommitMessage())
            .insertedBy(itemBankUser.getUserName())
            .build();

        return convert(testPackageRepository.save(entity));
    }

    private void validateAndUpdateGeneratedFields(final TestPackage testPackage) {
        verifyRequiredFields(testPackage);
        PackageMetadataGenerator.updatePackageWithGeneratedData(testPackage);
    }

    @Override
    public void discard(final String testPackageId) {
        TestPackageEntity existingEntity = testPackageRepository.findByPackageId(testPackageId);

        if(!existingEntity.isLocked()) {
            throw new ValidationException("Test package must be locked to be discarded");
        }

        final String user = SecurityUtil.getItemBankUser().getUserName();
        if(!user.equals(existingEntity.getInsertedBy())) {
            throw new ValidationException("Only the user that has the item locked can discard it");
        }

        TestPackageEntity entity = TestPackageEntity.builder()
            .beingCreated(existingEntity.isBeingCreated())
            .locked(existingEntity.isLocked())
            .testPackage(existingEntity.getTestPackage())
            .insertedBy(user)
            .deleted(true)
            .build();

        testPackageRepository.save(entity);
    }


    private void verifyRequiredFields(final TestPackage testPackage) {
        String validationErrorMessages = "";

        if (isBlank(testPackage.getGrade())) {
            validationErrorMessages += "Grade cannot be blank\n";
        }

        if (isBlank(testPackage.getSubject())) {
            validationErrorMessages += "Subject cannot be blank\n";
        }

        if (isBlank(testPackage.getType())) {
            validationErrorMessages += "Package type cannot be blank\n";
        }

        if (isBlank(testPackage.getTitle())) {
            validationErrorMessages += "Title cannot be blank\n";
        }

        if (isBlank(testPackage.getYear())) {
            validationErrorMessages += "Year cannot be blank\n";
        }

        //TODO - Check if this impacts all package types
        if (isBlank(testPackage.getSubType())) {
            validationErrorMessages += "Subtype cannot be blank\n";
        }

        if (StringUtils.isNotBlank(validationErrorMessages)) {
            throw new ValidationException("Test package is missing required data\n" + validationErrorMessages);
        }
    }

    private void validateEntity(final ItemBankUser itemBankUser, final TestPackageEntity existingTestPackage) {
        if (existingTestPackage == null) {
            return;
        }

        if (!existingTestPackage.isLocked()) {
            //Not sure this is the correct exception
            throw new ValidationException("Test package is not in edit state.");
        }

        if (existingTestPackage.isBeingCreated() && !itemBankUser.getUserName()
            .equals(existingTestPackage.getInsertedBy())) {
            throw new ValidationException("Test package is being created by another user");
        }
    }

    @NotNull
    private TestPackageResponse convert(final TestPackageEntity entity) {
        TestPackageResponse response = new TestPackageResponse();
        response.setTestPackageId(entity.getPackageId());
        response.setBeingCreated(entity.isBeingCreated());
        response.setLocked(entity.isLocked());
        response.setLockedBy(entity.isLocked() ? entity.getInsertedBy() : "");
        response.setTestPackage(entity.getTestPackage());
        return response;
    }
}
