package org.opentestsystem.ap.tms;

import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.datastore.DataStoreAttachmentManager;
import org.opentestsystem.ap.common.datastore.DataStoreDataManager;
import org.opentestsystem.ap.common.datastore.DataStoreItemManager;
import org.opentestsystem.ap.common.datastore.DataStoreUtility;
import org.opentestsystem.ap.common.datastore.client.S3BucketManager;
import org.opentestsystem.ap.common.datastore.client.S3VersionedBucketManager;
import org.opentestsystem.ap.common.datastore.repository.ItemEntityRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemHistoryRepository;
import org.opentestsystem.ap.common.datastore.repository.ItemSyncRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusRepository;
import org.opentestsystem.ap.common.datastore.repository.WorkflowStatusTransitionRepository;
import org.opentestsystem.ap.common.gitlab.GitLabItemManager;
import org.opentestsystem.ap.common.itembank.AttachmentValidator;
import org.opentestsystem.ap.common.itembank.EquationEditorRepository;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.management.ItemManagerEventProducer;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;

@EnableScheduling
@Configuration
public class TMSConfiguration {
    private final ItemBankProperties itemBankProperties;

    public TMSConfiguration(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    @Bean
    @ConditionalOnMissingBean
    public S3BucketManager s3BucketManager() {
        return new S3BucketManager(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public S3VersionedBucketManager s3VersionedBucketManager() {
        return new S3VersionedBucketManager(itemBankProperties);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreUtility dataStoreUtility() {
        return new DataStoreUtility();
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreAttachmentManager dataStoreAttachmentManager(S3BucketManager s3BucketManager,
                                                                 S3VersionedBucketManager s3VersionedBucketManager,
                                                                 DataStoreUtility dataStoreUtility) {
        return new DataStoreAttachmentManager(
            this.itemBankProperties,
            s3BucketManager,
            s3VersionedBucketManager,
            dataStoreUtility);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreDataManager dataStoreDataManager(ItemEntityRepository itemEntityRepository,
                                                     WorkflowStatusRepository workflowStatusRepository,
                                                     WorkflowStatusTransitionRepository workflowStatusTransitionRepository,
                                                     ItemSyncRepository itemSyncRepository,
                                                     ItemHistoryRepository itemHistoryRepository) {
        return new DataStoreDataManager(
            this.itemBankProperties,
            itemEntityRepository,
            workflowStatusRepository,
            workflowStatusTransitionRepository,
            itemSyncRepository,
            itemHistoryRepository);
    }

    @Bean
    @ConditionalOnMissingBean
    public ItemManagerEventProducer itemManagementEventProducer(RabbitTemplate rabbitTemplate) {
        return new ItemManagerEventProducer(this.itemBankProperties, rabbitTemplate);
    }

    @Bean
    @ConditionalOnMissingBean
    public DataStoreItemManager dataStoreItemManager(DataStoreDataManager dataManager,
                                                     DataStoreAttachmentManager attachmentManager,
                                                     ItemManagerEventProducer itemManagementEventProducer,
                                                     DataStoreUtility utility) {
        return new DataStoreItemManager(
            this.itemBankProperties,
            dataManager,
            attachmentManager,
            itemManagementEventProducer,
            utility);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public GitLabItemManager gitLabManager(ItemRepository itemRepository) {
        return new GitLabItemManager(this.itemBankProperties, itemRepository);
    }

    // ------------------------------------------------------------------------

    @Bean
    @ConditionalOnMissingBean
    public ItemManager itemManager(DataStoreItemManager dataStoreManager,
                                   GitLabItemManager gitLabManager,
                                   AttachmentValidator attachmentValidator,
                                   EquationEditorRepository equationEditorRepository) {
        return new ItemManager(
            dataStoreManager, gitLabManager, attachmentValidator, equationEditorRepository);
    }

    // ------------------------------------------------------------------------

}
