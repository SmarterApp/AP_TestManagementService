package org.opentestsystem.ap.tms.rest.v1;

import lombok.extern.slf4j.Slf4j;
import org.apache.velocity.exception.ResourceNotFoundException;
import org.opentestsystem.ap.tms.packager.model.FixedFormPackageRequest;
import org.opentestsystem.ap.tms.packager.service.FixedFormPackagerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.util.Optional;

@Slf4j
@RestController
@RequestMapping("/api/v1/package")
public class PackagerApi {

    private final FixedFormPackagerService fixedFormPackagerService;

    @Autowired
    public PackagerApi(final FixedFormPackagerService fixedFormPackagerService) {
        this.fixedFormPackagerService = fixedFormPackagerService;
    }

    @PostMapping(value = "generate", produces = "application/xml")
    @ResponseBody
    public ResponseEntity<FileSystemResource> generatePackage(@ModelAttribute final FixedFormPackageRequest fixedFormPackageRequest) {
        log.info("Generating fixed form package");

        Optional<File> packageFile = fixedFormPackagerService.generateFixedFormPackage(fixedFormPackageRequest);

        if (!packageFile.isPresent()) {
            throw new ResourceNotFoundException("Could not generate Fixed Form Package");
        }

        FileSystemResource resource = new FileSystemResource(packageFile.get());

        return ResponseEntity
                .ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);
    }

}
