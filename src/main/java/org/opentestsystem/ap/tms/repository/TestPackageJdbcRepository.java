package org.opentestsystem.ap.tms.repository;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.tms.model.TestPackageEntity;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public class TestPackageJdbcRepository implements TestPackageRepository {
    private final NamedParameterJdbcTemplate template;
    private final ObjectMapper mapper;
    private final TestPackageRowMapper rowMapper;

    @Value("${test-package.create}")
    private String sqlCreate;

    @Value("${test-package.findOne}")
    private String sqlFindOne;

    @Value("${test-package.findLatestByTestPackageId}")
    private String sqlFindLatestByPackageId;

    @Value("${test-package.findLatestNonEditedByTestPackageId}")
    private String sqlFindLatestNonEditedByPackageId;

    public TestPackageJdbcRepository(final NamedParameterJdbcTemplate template,
                                     final ObjectMapper mapper,
                                     final TestPackageRowMapper rowMapper) {
        this.template = template;
        this.mapper = mapper;
        this.rowMapper = rowMapper;
    }

    @Override
    public TestPackageEntity save(final TestPackageEntity entity) {
        UUID id = UUID.randomUUID();
        template.update(sqlCreate,
            new MapSqlParameterSource("id", id)
                .addValue("packageId", entity.getPackageId())
                .addValue("locked", entity.isLocked())
                .addValue("beingCreated", entity.isBeingCreated())
                .addValue("testPackage", mapTestPackage(entity))
                .addValue("message", entity.getMessage())
                .addValue("deleted", entity.isDeleted())
                .addValue("insertedBy", entity.getInsertedBy()));

        return findOne(id);
    }

    @Override
    public TestPackageEntity findByPackageId(final String testPackageId) {
        try {
            return template.queryForObject(sqlFindLatestByPackageId,
                new MapSqlParameterSource("testPackageId", testPackageId),
                rowMapper);
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

    @Override
    public TestPackageEntity findNonEditedByPackageId(final String testPackageId) {
        try {
            return template.queryForObject(sqlFindLatestNonEditedByPackageId,
                new MapSqlParameterSource("testPackageId", testPackageId),
                rowMapper);
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

    private TestPackageEntity findOne(final UUID id) {
        try {
            return template.queryForObject(sqlFindOne,
                new MapSqlParameterSource("id", id),
                rowMapper);
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

    private String mapTestPackage(TestPackageEntity entity) {
        try {
            return mapper.writeValueAsString(entity.getTestPackage());
        } catch (JsonProcessingException e) {
            throw new SystemException(e);
        }
    }
}
