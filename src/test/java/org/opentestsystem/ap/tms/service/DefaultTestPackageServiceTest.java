package org.opentestsystem.ap.tms.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.tms.builder.TestPackageBuilder;
import org.opentestsystem.ap.tms.model.TestPackage;
import org.opentestsystem.ap.tms.model.TestPackageEntity;
import org.opentestsystem.ap.tms.model.TestPackageResponse;
import org.opentestsystem.ap.tms.repository.TestPackageRepository;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultTestPackageServiceTest {
    @Mock
    private TestPackageRepository testPackageRepository;

    @Captor
    private ArgumentCaptor<TestPackageEntity> entityCaptor;

    private DefaultTestPackageService service;

    private TestPackageEntity entity;

    @Before
    public void setUp() {
        entity = TestPackageEntity.builder()
            .insertedBy("test")
            .insertedDate(Instant.now())
            .locked(false)
            .beingCreated(false)
            .packageId("SBAC-1")
            .message("nothing")
            .build();

        service = new DefaultTestPackageService(testPackageRepository);
    }

    @Test
    public void shouldCreate() {
        TestPackage testPackage = TestPackageBuilder.builder().build();

        when(testPackageRepository.findByPackageId("1")).thenReturn(null);
        when(testPackageRepository.save(isA(TestPackageEntity.class))).thenReturn(entity);

        TestPackageResponse response = service.create(testPackage);

        verify(testPackageRepository).save(entityCaptor.capture());

        assertThat(response.getTestPackageId()).isEqualTo("SBAC-1");

        TestPackageEntity persistedEntity = entityCaptor.getValue();

        assertThat(persistedEntity.isLocked()).isTrue();
        assertThat(persistedEntity.isBeingCreated()).isTrue();
    }

    @Test(expected = ValidationException.class)
    public void shouldThrowIfCreatingANonUniquePackage() {
        TestPackage testPackage = TestPackageBuilder.builder().build();

        when(testPackageRepository.findByPackageId(isA(String.class))).thenReturn(entity);

        service.create(testPackage);
    }

    @Test
    public void shouldSave() {
        TestPackage testPackage = TestPackageBuilder.builder().build();

        TestPackageEntity entity = TestPackageEntity.builder()
            .insertedBy("test")
            .insertedDate(Instant.now())
            .locked(true)
            .beingCreated(false)
            .packageId("SBAC-1")
            .message("nothing")
            .build();

        when(testPackageRepository.findByPackageId(isA(String.class))).thenReturn(entity);
        when(testPackageRepository.save(isA(TestPackageEntity.class))).thenReturn(entity);

        TestPackageResponse response = service.save("SBAC-1", testPackage);

        verify(testPackageRepository).save(entityCaptor.capture());

        assertThat(entityCaptor.getValue().getTestPackage()).isEqualTo(testPackage);
        assertThat(response.getTestPackageId()).isEqualTo("SBAC-1");
    }
}