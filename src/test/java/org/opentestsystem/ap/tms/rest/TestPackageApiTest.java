package org.opentestsystem.ap.tms.rest;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.exception.ResourceNotFoundException;
import org.opentestsystem.ap.tms.model.TestPackage;
import org.opentestsystem.ap.tms.model.TestPackageResponse;
import org.opentestsystem.ap.tms.service.TestPackageService;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class TestPackageApiTest {
    @Mock
    private TestPackageService testPackageService;

    private TestPackageApi api;

    @Before
    public void setUp() {
        api = new TestPackageApi(testPackageService);
    }

    @Test
    public void shouldCreateTestPackage() {
        TestPackage testPackage = TestPackage.builder().build();

        api.createTestPackage(testPackage);

        verify(testPackageService).create(testPackage);
    }

    @Test
    public void shouldSaveTestPackage() {
        TestPackage testPackage = TestPackage.builder().build();

        api.saveTestPackage(testPackage);

        verify(testPackageService).save(testPackage);
    }

    @Test
    public void shouldLockTestPackage() {
        api.lock("SBAC-1");

        verify(testPackageService).lock("SBAC-1");
    }

    @Test
    public void shouldFindTestPackage() {
        TestPackageResponse response = mock(TestPackageResponse.class);

        when(testPackageService.find("1")).thenReturn(Optional.of(response));

        assertThat(api.findByTestPackageId("1")).isEqualTo(response);

        verify(testPackageService).find("1");
    }

    @Test(expected = ResourceNotFoundException.class)
    public void shouldThrowIfTestPackageCannotBeFound() {
        when(testPackageService.find("1")).thenReturn(Optional.empty());

        api.findByTestPackageId("1");
    }

    @Test
    public void shouldDiscard() {
        api.discard("1");
        verify(testPackageService).discard("1");
    }
}