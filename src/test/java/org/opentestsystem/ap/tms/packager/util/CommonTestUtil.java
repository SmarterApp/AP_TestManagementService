/*
 *  Copyright 2017 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.opentestsystem.ap.tms.packager.util;

import com.google.common.collect.Lists;
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitClientFactory;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.SystemException;
import org.opentestsystem.ap.common.model.Asl;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Audio;
import org.opentestsystem.ap.common.model.Braille;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.EqItemCore;
import org.opentestsystem.ap.common.model.EqPart;
import org.opentestsystem.ap.common.model.HtqoItem;
import org.opentestsystem.ap.common.model.Images;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemAudioResource;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.ItemPatchRequest;
import org.opentestsystem.ap.common.model.ItemTransaction;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.model.McItem;
import org.opentestsystem.ap.common.model.MiItem;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.model.ModelObjectMapper;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.model.Table;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.model.eqconfig.EqEquationEditorConfigurationFactory;
import org.opentestsystem.ap.common.model.glossary.GlossaryDialect;
import org.opentestsystem.ap.common.model.glossary.GlossaryTerm;
import org.opentestsystem.ap.common.model.scoring.Scoring;
import org.opentestsystem.ap.common.model.scoring.expressions.Expression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqEvaluateExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqExpressionContainsExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqGetEquationsCountExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqGetInequalitiesCountExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqIsEmptyExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqIsEquivalentExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqIsEquivalentLogExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqIsEquivalentTrigExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqIsMatchExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqLineContainsExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqMatchExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.eq.CustomEqNumberFromExpressionExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.general.CustomCountBoolExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.general.CustomCountDoubleInRangeExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.general.CustomMapExpressionExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.general.CustomMaxIntExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.general.CustomMinIntExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.general.CustomStringToFloatExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiCountSidesExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiGetLengthExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiGetNameExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiGetPointExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiGetSelectedRegionCountExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiGetSlopeExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiGetVectorExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiHasVertexExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiIntersectPointExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiIntersectRegionExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiIsGraphicTypeExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.custom.gi.CustomGiIsRegionSelectedExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.AndExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.BaseValueExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.ContainerSizeExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.DivideExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.EqualExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.GtExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.GteExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.IndexExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.InsideExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.IntegerToFloatExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.LtExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.LteExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.OrExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.ProductExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.StringMatchExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.SubtractExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.SumExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.TruncateExpression;
import org.opentestsystem.ap.common.model.scoring.expressions.qti.VariableExpression;
import org.opentestsystem.ap.common.model.scoring.rules.Rule;
import org.opentestsystem.ap.common.model.scoring.variables.Variable;
import org.opentestsystem.ap.common.saaif.ItemContext;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.item.AssociatedStimulusSupplier;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.common.saaif.transformer.ModelTransformer;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistitemType;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.common.security.model.ItemBankUser;
import org.opentestsystem.ap.common.security.model.User;
import org.opentestsystem.ap.common.security.model.UserBuilder;
import org.opentestsystem.ap.common.util.DefaultImageGenerator;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.file.FileVisitOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Collections.emptyList;
import static org.apache.commons.lang.StringUtils.EMPTY;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EBSR;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_EQ;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_HTQO;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MC;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MI;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_MS;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_SA;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_STIM;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_TUT;
import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_WER;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_AUDIO;
import static org.opentestsystem.ap.common.model.ModelConstants.Section.SECTION_IMAGES;
import static org.opentestsystem.ap.common.model.Table.CELL_TYPE_ANSWER_NUMERIC;
import static org.opentestsystem.ap.common.model.Table.CELL_TYPE_LABEL;
import static org.opentestsystem.ap.common.model.WorkflowStatusEnum.Draft;
import static org.opentestsystem.ap.common.saaif.SaaifConstants.ScoringCardinality.ORDERED;
import static org.opentestsystem.ap.common.saaif.SaaifConstants.ScoringCardinality.SINGLE;
import static org.opentestsystem.ap.common.saaif.SaaifConstants.ScoringType.FLOAT;
import static org.opentestsystem.ap.common.saaif.SaaifConstants.ScoringType.INTEGER;
import static org.opentestsystem.ap.common.saaif.SaaifConstants.ScoringType.STRING;

/**
 * When instantiated the utility creates a temp directory and another directory in it. These represent the local repo
 * base and a local repository.  There is a cleanup method intended for tests during their tear down.
 */
@Slf4j
@Getter
public class CommonTestUtil {

    private ModelObjectMapper mapper = new ModelObjectMapper();

    private ItemFactory itemFactory = new ItemFactory();

    private DefaultImageGenerator imageGenerator = new DefaultImageGenerator();

    // ------------------------------------------------------------------------

    public static final String GI_CONTENT_ZIP = "gi-content.zip";

    public static final ItemBankUser ITEM_BANK_USER = new ItemBankUser("test@fake.com", "Test User");

    public static final Integer GROUP_ID = 8765309;

    public static final Integer PROJECT_ID = 11;

    public static final String BANK_KEY = "200";

    public static final String ITEM_ID = "200000";

    public static final String LEGACY_ID = String.format("item-%s-%s", BANK_KEY, ITEM_ID);

    public static final String HISTORY_ID = "historyId";

    public static final String TRANSACTION_ID = "0123456789";

    public static final String STIMULUS_ID = "1122334455";

    public static final String TUTORIAL_ID = "TUT12345";

    public static final String SCRATCH_PAD_NAME = "scratchpad";

    public static final String ITEM_BANK_HOST = "http://itembank.com";

    public static final String API_VERSION = "/api/version";


    public static final String COMMIT_ID = "9fe4f211dc4886acfa4ff4e9d9e5024e91d914af";

    public static final String COMMIT_MESSAGE = "this is a commit message";

    public static final String PROMPT = "This is a prompt";

    public static final String PROMPT_RICH_TEXT = "<p style=\"font-weight: bold;\">This is a rich text prompt</p>";

    public static final String EXEMPLAR_RESPONSE_1 = "This is an exemplar response 1";

    public static final String EXEMPLAR_RESPONSE_2 = "This is an exemplar response 2";

    public static final ItemTransaction ITEM_EDITOR = new ItemTransaction("editor@fake.com", ModelConstants.Section
        .SECTION_CORE);

    public static final String WORKFLOW_STATUS_CODE_DRAFT = "Draft";

    public static final String SYSTEM_VERSION = "iat-15";

    public static final String RENDER_HOST = "http://localhost:8200";

    public static final String RENDER_EXTERNAL_HOST = "http://localhost:8200";

    // ------------------------------------------------------------------------

    private AppAssembler assembler;

    private SaaifAssembler saaifAssembler;

    private SaaifMetadataAssembler metadataAssembler;

    private SaaifWordListAssembler wordListAssembler;

    private JsonModelAssembler jsonModelAssembler;

    private StringAssembler stringAssembler;

    private Configuration freemarker;

    private ItemBankProperties itemBankProperties;

    private GitClientFactory gitClientFactory;

    private ItemContext itemContext;

    private Path localBaseDir;

    private Path localRepoDir;

    private String gitlabHost = "https://gitlab-dev.smarterbalanced.org";

    private String gitlabUser = "test@fake.com";

    private String gitlabPass = "testPassword";

    private String gitlabGroup = "TestItembankGroup";

    private String gitLabProject = ITEM_ID;

    private int idMinValue = 1000000000;

    private int idMaxValue = Integer.MAX_VALUE;

    private TransformerFactory transformerFactory;

    private AssociatedStimulusSupplier associatedStimulusSupplier;

    static {
        System.setProperty("javax.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory");
    }

    /**
     * Creates a temporary directory using a prefix of <code>gitlabGroup</code>. A directory is created in the temp
     * directory with the name <code>gitLabProject</code>. The <code>GitlabProperties</code> instance is created with
     * the default values set on the class's instance properties.
     */
    public CommonTestUtil() {
        init();
    }

    /**
     * Same as the default constructor but instead of using default values the class's instance properties are first set
     * with the arguments of the constructor.
     */
    public CommonTestUtil(String gitlabHost, String gitlabUser, String gitlabPass, String gitlabGroup,
                          String gitLabProject, int idMinValue, int idMaxValue) {
        this.gitlabHost = gitlabHost;
        this.gitlabUser = gitlabUser;
        this.gitlabPass = gitlabPass;
        this.gitlabGroup = gitlabGroup;
        this.gitLabProject = gitLabProject;
        this.idMinValue = idMinValue;
        this.idMaxValue = idMaxValue;

        init();
    }

    private void init() {
        try {
            localBaseDir = Files.createTempDirectory(gitlabGroup);
            localRepoDir = Files.createDirectories(
                Paths.get(localBaseDir.toString(), "test", gitLabProject));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        itemBankProperties = new ItemBankProperties();
        itemBankProperties.setBankKey(BANK_KEY);
        itemBankProperties.setGroup(gitlabGroup);
        itemBankProperties.setHost(gitlabHost);
        itemBankProperties.setIdMinValue(idMinValue);
        itemBankProperties.setIdMaxValue(idMinValue);
        itemBankProperties.setUser(gitlabUser);
        itemBankProperties.setPassword(gitlabUser);
        itemBankProperties.setLocalBaseDir(localBaseDir.toString());
        itemBankProperties.setSystemVersion(SYSTEM_VERSION);

        itemBankProperties.getPreview().setExternalHost(RENDER_EXTERNAL_HOST);

        freemarker = new Configuration(Configuration.VERSION_2_3_25);
        freemarker.setClassForTemplateLoading(this.getClass(), "/saaif_templates");
        freemarker.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarker.setDefaultEncoding("UTF-8");

        metadataAssembler = new SaaifMetadataAssembler();
        metadataAssembler.init();

        wordListAssembler = new SaaifWordListAssembler();
        wordListAssembler.init();

        saaifAssembler = new SaaifAssembler(metadataAssembler, wordListAssembler);
        saaifAssembler.init();

        associatedStimulusSupplier = mock(AssociatedStimulusSupplier.class);
        when(associatedStimulusSupplier.getAssociatedStimulus(isA(AssessmentItem.class))).thenReturn(Optional.empty());

        transformerFactory = new TransformerFactory(associatedStimulusSupplier);

        jsonModelAssembler = new JsonModelAssembler();

        stringAssembler = new StringAssembler(freemarker);

        assembler = new AppAssembler(saaifAssembler, jsonModelAssembler, stringAssembler);

        gitClientFactory = new GitClientFactory(itemBankProperties, assembler, imageGenerator, transformerFactory);

        itemContext = new ItemContext(ITEM_ID, LEGACY_ID, BANK_KEY, assembler, localRepoDir);
    }


    // ------------------------------------------------------------------------

    /**
     * Deletes the temp directory and all its contents.
     */
    public void cleanup() {
        deleteDirectory(localBaseDir);
    }

    public void deleteDirectory(Path directoryToDelete) {
        if (Files.exists(directoryToDelete) && Files.isDirectory(directoryToDelete)) {
            log.info("deleting {}", directoryToDelete.toString());
            try {
                Files.walk(directoryToDelete, FileVisitOption.FOLLOW_LINKS)
                    .sorted(Comparator.reverseOrder())
                    .map(Path::toFile)
//                    .peek(System.out::println)
                    .forEach(File::delete);
            } catch (Exception e) {
                throw new RuntimeException("Error trying to delete a directory", e);
            }
        }
    }

    // ------------------------------------------------------------------------

    public TutItem newTutItem() {
        final TutItem item = (TutItem) itemFactory.newItem(ITEM_ID, TYPE_TUT);
        item.getWorkflow().setWorkflowStatusCode(Draft.toString());
        return item;
    }

    public StimItem newStimItem() {
        final StimItem item = (StimItem) itemFactory.newItem(ITEM_ID, TYPE_STIM);
        item.getCore().getEn().setContent(PROMPT);
        return item;
    }

    public SaItem newSaItem() {
        final SaItem item = (SaItem) itemFactory.newItem(ITEM_ID, TYPE_SA);
        item.getWorkflow().setWorkflowStatusCode(Draft.toString());
        item.getCore().getEn().setPrompt(PROMPT);
        item.getCore().getEn().setExemplarResponses(newArrayList(EXEMPLAR_RESPONSE_1, EXEMPLAR_RESPONSE_2));
        return item;
    }

    public WerItem newWerItem() {
        final WerItem item = (WerItem) itemFactory.newItem(ITEM_ID, TYPE_WER);
        item.getCore().getEn().setPrompt(PROMPT_RICH_TEXT);
        item.getCore().getEn().setExemplarResponses(newArrayList(EXEMPLAR_RESPONSE_1, EXEMPLAR_RESPONSE_2));
        return item;
    }

    public EbsrItem newEbsrItem() {
        final EbsrItem item = (EbsrItem) itemFactory.newItem(ITEM_ID, TYPE_EBSR);
        item.getCore().getEn().setPrompt(PROMPT);
        item.getCore().getEn().setPartAPrompt("This is a multiple choice.");
        item.getCore().getEn().setPartAOptions(newMultipleChoiceOptions());
        item.getCore().getEn().setPartBPrompt("This is a multiple select.");
        item.getCore().getEn().setPartBOptions(newMultipleSelectOptions());
        return item;
    }

    public List<ItemOption> newMultipleChoiceOptions() {
        final List<ItemOption> options = newArrayList(
            newItemOption("Choice 1", true),
            newItemOption("Choice 2", false),
            newItemOption("Choice 3", false));
        return options;
    }

    public List<ItemOption> newMultipleSelectOptions() {
        final List<ItemOption> options = newArrayList(
            newItemOption("Choice 4", true),
            newItemOption("Choice 5", true),
            newItemOption("Choice 6", false));
        return options;
    }

    public ItemOption newItemOption(final String text, final boolean correctAnswer) {
        final ItemOption io = new ItemOption();
        io.setText(text);
        io.setCorrectAnswer(correctAnswer);
        return io;
    }

    public ItemRelease newSaaifSaItem() {
        final SaItem item = newSaItem();
        final ModelTransformer transformer = transformerFactory.newTransformer(TYPE_SA, imageGenerator);
        return transformer.toSaaif(item, BANK_KEY, newItemContext(item.getId()));
    }

    public ItemContext newItemContext(final String itemId) {
        return new ItemContext(itemId, LEGACY_ID, BANK_KEY, assembler, localRepoDir);
    }

    public ItemRelease newSaaifWerItem() {
        final WerItem item = newWerItem();
        final ModelTransformer transformer = transformerFactory.newTransformer(TYPE_WER, imageGenerator);
        return transformer.toSaaif(item, BANK_KEY, newItemContext(item.getId()));
    }

    public SmarterAppMetadata newSaaifMetadata() {
        final SmarterAppMetadata metadata = new SmarterAppMetadata();
        metadata.getLanguage().add("eng");
        metadata.setSubject("MATH");
        metadata.getStandardPublication().add(newSaaifStandardPublication());
        return metadata;
    }

    public WordlistreleaseType newWordList() {
        final WordlistreleaseType wordList = new WordlistreleaseType();
        final WordlistitemType item = new WordlistitemType();
        wordList.setItem(item);
        return wordList;
    }

    public SmarterAppMetadata.IrtDimension newSaaifIrtDimension() {
        final SmarterAppMetadata.IrtDimension irtDimension = new SmarterAppMetadata.IrtDimension();
        return irtDimension;
    }

    public SmarterAppMetadata.StandardPublication newSaaifStandardPublication() {
        final SmarterAppMetadata.StandardPublication publication = new SmarterAppMetadata.StandardPublication();
        publication.setPrimaryStandard("SBAC-ELA-v1:1-IT|11-3");
        publication.setPublication("SBAC-ELA-v1");
        List tst = new ArrayList<>();
        return publication;
    }

    public User getUser() {
        return UserBuilder.builder()
            .accountNonExpired(true)
            .accountNonLocked(true)
            .authorities(emptyList())
            .credentialsNonExpired(true)
            .email("email@fake.com")
            .enabled(true)
            .firstName("first")
            .fullName("first last")
            .id("id")
            .username("username@fake.com")
            .build();
    }

    public Table newTable() {
        Table.Row row1 = new Table.Row();
        row1.addCell(new Table.Cell(CELL_TYPE_LABEL, "1"));
        row1.addCell(new Table.Cell(CELL_TYPE_ANSWER_NUMERIC, "11"));

        Table.Row row2 = new Table.Row();
        row2.addCell(new Table.Cell(CELL_TYPE_LABEL, "2"));
        row2.addCell(new Table.Cell(CELL_TYPE_ANSWER_NUMERIC, "22"));

        Table table = new Table();
        table.setTitle("August Lemonade Sales");
        table.setColumns(newArrayList(new Table.Column("Week"), new Table.Column("Cups Sold")));
        table.setRows(newArrayList(row1, row2));

        return table;
    }

    public HtqoItem newHtqoItem() {
        final HtqoItem item = (HtqoItem) itemFactory.newItem(ITEM_ID, TYPE_HTQO);
        item.getCore().getEn().setPrompt(PROMPT_RICH_TEXT);

        item.getCore().getEn().getHtqOrderable().setOrderableStrings(Arrays.asList("Option1", "Option 2", "Option 3", "Option 4"));
        item.getCore().getEn().getHtqOrderable().setOrderableStringsCorrectOrder(Arrays.asList(3,2,1,0));

        return item;
    }


    public McItem newMcItem() {
        final McItem item = (McItem) itemFactory.newItem(ITEM_ID, TYPE_MC);
        item.getCore().getEn().setPrompt(PROMPT_RICH_TEXT);

        ItemOption option1 = new ItemOption();
        option1.setText("Option 1");
        option1.setCorrectAnswer(false);
        item.getCore().getEn().getOptions().add(option1);

        ItemOption option2 = new ItemOption();
        option2.setText("Option 2");
        option2.setCorrectAnswer(false);
        item.getCore().getEn().getOptions().add(option2);

        ItemOption option3 = new ItemOption();
        option3.setText("Option 3");
        option3.setCorrectAnswer(true);
        item.getCore().getEn().getOptions().add(option3);

        return item;
    }


    public MsItem newMsItem() {
        final MsItem item = (MsItem) itemFactory.newItem(ITEM_ID, TYPE_MS);
        item.getCore().getEn().setPrompt(PROMPT_RICH_TEXT);

        ItemOption option1 = new ItemOption();
        option1.setText("Option 1");
        option1.setCorrectAnswer(false);
        item.getCore().getEn().getOptions().add(option1);

        ItemOption option2 = new ItemOption();
        option2.setText("Option 2");
        option2.setCorrectAnswer(true);
        item.getCore().getEn().getOptions().add(option2);

        ItemOption option3 = new ItemOption();
        option3.setText("Option 3");
        option3.setCorrectAnswer(true);
        item.getCore().getEn().getOptions().add(option3);

        return item;
    }

    public MiItem newMiItem() {
        final MiItem item = (MiItem) itemFactory.newItem(ITEM_ID, TYPE_MI);
        item.getCore().getEn().setPrompt(PROMPT_RICH_TEXT);

        ItemImageResource imageResource = new ItemImageResource();
        imageResource.setId("1");
        imageResource.setProductionFile(newAttachment(null, "item_200196_masks.jpg"));
        item.getImages().getImageResources().add(imageResource);

        Table table = Table.newMiTable();
        table.getColumns().add(new Table.Column(EMPTY));
        table.getColumns().get(1).setLabel("<p><img class=\"place-holder\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p>");
        table.getColumns().get(2).setLabel("<p>Column 2</p>");

        int rowIdx = 0;
        for (Table.Row row: table.getRows()) {
            for(Table.Cell cell: row.getCells()) {
                if (cell.getType().equalsIgnoreCase("label")) {
                    cell.setValue(String.format("<p>Row %s</p>", rowIdx));
                } else {
                    cell.setValue(rowIdx == 0 || rowIdx == 2);
                }
            }
            row.getCells().add(new Table.Cell("answer", true));
            rowIdx++;
        }

        item.getCore().getEn().setTable(table);

        return item;
    }

    public EqItem newEqItem() {
        final EqPart part1 = new EqPart();
        part1.setLeftLabel("Eq Part 1 Left");
        part1.setRightLabel("Eq Part 1 Right");

        final EqPart part2 = new EqPart();
        part2.setLeftLabel("Eq Part 2 Left");
        part2.setRightLabel("Eq Part 2 Right");

        final EqItemCore core = new EqItemCore();
        core.setEquationEditorConfiguration(EqEquationEditorConfigurationFactory.newHighSchoolBaseConfiguration());
        core.getEn().setPrompt("This is an EQ prompt");
        core.getEn().setParts(newArrayList(part1, part2));


        final EqItem item = (EqItem) itemFactory.newItem(ITEM_ID, TYPE_EQ);
        item.setCore(core);
        item.getCore().getScoring().setRubric("Eq rubric");

        return item;
    }

    public void outputTemplate(final Item item, final String template) {
        final Map<String, Object> input = new HashMap<String, Object>();
        input.put("item", item);

        String tiStem = "";

        try (Writer stringWriter = new StringWriter()) {
            final Template t = freemarker.getTemplate(template);
            t.process(input, stringWriter);
            tiStem = stringWriter.toString();
        } catch (TemplateException | IOException e) {
            e.printStackTrace();
        }

        System.out.println(tiStem);
    }

    public Images newImages() {
        final Attachment conceptFile = newAttachment(SECTION_IMAGES, "concept_file.jpg");


        final Attachment productionFile = newAttachment(SECTION_IMAGES, "prod_file.jpg");

        final ItemImageResource imageResource = new ItemImageResource();
        imageResource.setId("1");
//        imageResource.setConcept("This is the concept description.");
//        imageResource.setConceptFile(conceptFile);
//        imageResource.setProductionFile(productionFile);

        final Images images = new Images();
        images.setImageResources(newArrayList(imageResource));

        return images;
    }

    public Audio newAudio() {
        final Attachment transcriptFile = newAttachment(SECTION_AUDIO, "transcript_file.mp4");

        final Attachment productionFile1 = newAttachment(SECTION_AUDIO, "prod_file_1.mp4");
        final Attachment productionFile2 = newAttachment(SECTION_AUDIO, "prod_file_2.mp4");

        final ItemAudioResource audioResource = new ItemAudioResource();
        audioResource.setId("1");
//        audioResource.setTranscriptFile(transcriptFile);
//        audioResource.setProductionFiles(newArrayList(productionFile1, productionFile2));

        final Audio audio = new Audio();
        audio.setAudioResources(newArrayList(audioResource));

        return audio;
    }

    public Attachment newAttachment(final String section, final String fileName) {
        final Attachment attachment = new Attachment();
        attachment.setSection(section);
        attachment.setFileName(fileName);
        attachment.setUploadedDate(new Date());
        return attachment;
    }

    public void writeItemJsonToConsole(final Item item) {
        try {
            mapper.writerWithDefaultPrettyPrinter().writeValue(new PrintWriter(System.out), item);
        } catch (IOException e) {
            throw new SystemException("Error writing item to JSON", e);
        }
    }

    public String toJsonString(final Object object) {
        final StringWriter writer = new StringWriter();
        writeObject(object, writer);
        return writer.toString();
    }

    public void writeObject(final Object object, final Writer out) {
        try {
            mapper.writerWithDefaultPrettyPrinter().writeValue(out, object);
        } catch (IOException e) {
            throw new SystemException("Error writing item to JSON", e);
        }
    }

    public <T> T readObject(final InputStream inputStream, Class<T> type) {
        return jsonModelAssembler.readObject(inputStream, type);
    }

    public InputStream readGiContentZip() {
        return getResourceAsStream(GI_CONTENT_ZIP);
    }

    public InputStream getResourceAsStream(final String file) {
        return this.getClass().getClassLoader().getResourceAsStream(file);
    }

    // ------------------------------------------------------------------------

    public Scoring newEqScoring() {

        final CustomEqIsEquivalentExpression isEquivalentExpression = newCustomEqIsEquivalentExpression("52", "@", true);

        final CustomMapExpressionExpression mapExpression = newCustomMapExpressionExpression("Responses", isEquivalentExpression);

        final Variable varObj = newVariable("obj", STRING, ORDERED);
        varObj.setExpression(mapExpression);

        final VariableExpression objVarExpression = newVariableExpression(varObj.getIdentifier());

        final ContainerSizeExpression containerSizeExpression = newContainerSizeExpression();
        containerSizeExpression.setExpression(objVarExpression);

        final Variable varObjCount = newVariable("objCount", INTEGER, SINGLE);
        varObjCount.setExpression(containerSizeExpression);

        final EqualExpression equalExpression = newEqualExpression(newVariableExpression(varObjCount.getIdentifier()), newBaseValueExpression("float", "1"));

        final Rule rule = newRule(1F, equalExpression);

        final Scoring scoring = new Scoring();
        scoring.setRubric("This is an EQ scoring rubric.");

        scoring.addVariable(varObj);
        scoring.addVariable(varObjCount);

        scoring.addRule(rule);

        return scoring;
    }

    public Scoring newEqScoring3346() {
        final CustomEqIsEquivalentExpression isResponse1EqualExpressionTo10 =
            newCustomEqIsEquivalentExpression("10", "Response1", true);

        final CustomEqIsEquivalentExpression isResponse2EqualExpressionTo4 =
            newCustomEqIsEquivalentExpression("4", "Response2  ", true);

        final AndExpression andExpression = new AndExpression();
        andExpression.setExpressions(Lists.newArrayList(isResponse1EqualExpressionTo10, isResponse2EqualExpressionTo4));

        final Rule ifRule = new Rule();
        ifRule.setScore(2F);
        ifRule.setExpression(andExpression);

        final Rule elseIf10Rule = new Rule();
        elseIf10Rule.setScore(1F);
        elseIf10Rule.setExpression(isResponse1EqualExpressionTo10);

        final Rule elseIf4Rule = new Rule();
        elseIf4Rule.setScore(1F);
        elseIf4Rule.setExpression(isResponse2EqualExpressionTo4);

        final Scoring scoring = new Scoring();
        scoring.setRubric("This is an EQ scoring rubric.");

        scoring.addRule(ifRule);
        scoring.addRule(elseIf10Rule);
        scoring.addRule(elseIf4Rule);

        return scoring;
    }

    public Scoring newEqScoring3413() {


        final CustomEqIsEquivalentExpression isEquivalentTo4Expression = newCustomEqIsEquivalentExpression("4", "@", true);
        final CustomMapExpressionExpression mapTo4Expression = newCustomMapExpressionExpression("Responses", isEquivalentTo4Expression);
        final Variable variable4 = newVariable("4", STRING, ORDERED);
        variable4.setExpression(mapTo4Expression);

        final VariableExpression variable4Expression = newVariableExpression(variable4.getIdentifier());
        final ContainerSizeExpression container4CountSizeExpression = newContainerSizeExpression(variable4Expression);
        final Variable variable4Count = newVariable("4Count", INTEGER, SINGLE);
        variable4Count.setExpression(container4CountSizeExpression);

        final CustomEqIsEquivalentExpression isEquivalentTo9Expression = newCustomEqIsEquivalentExpression("9", "@", true);
        final CustomMapExpressionExpression mapTo9Expression = newCustomMapExpressionExpression("Responses", isEquivalentTo4Expression);
        final Variable variable9 = newVariable("9", STRING, ORDERED);
        variable9.setExpression(mapTo9Expression);

        final VariableExpression variable9Expression = newVariableExpression(variable9.getIdentifier());
        final ContainerSizeExpression container9CountSizeExpression = newContainerSizeExpression(variable9Expression);
        final Variable variable9Count = newVariable("9Count", INTEGER, SINGLE);
        variable9Count.setExpression(container9CountSizeExpression);


        final Variable variableNumberinSecondBox = newVariable("NumberinSecondBox", FLOAT, SINGLE);
        final Variable variableNumber2Plus8 = newVariable("Number2Plus8", FLOAT, SINGLE);
        final Variable variableNumber2Plus8Div10 = newVariable("Number2Plus8Div10", FLOAT, SINGLE);

        final Variable variableNumberinFirstBox = newVariable("NumberinFirstBox", FLOAT, SINGLE);
        final Variable variableNumber1Plus8 = newVariable("Number1Plus8", FLOAT, SINGLE);
        final Variable variableNumber1Plus8Div10 = newVariable("Number1Plus8Div10", FLOAT, SINGLE);

        final Variable variableIntgerNumber = newVariable("IntgerNumber", INTEGER, SINGLE);
        final Variable variableIntger2Number = newVariable("IntegerNumber2", INTEGER, SINGLE);

        final Scoring scoring = new Scoring();
        scoring.setRubric("This is an EQ scoring rubric.");

        return scoring;
    }

    public Rule newAndRule() {
        return newRule(3F, newAndExpression());
    }

    public Rule newOrRule() {
        return newRule(2F, newOrExpression());
    }

    public Rule newRule(final Float score, final Expression expression) {
        final Rule rule = new Rule();
        rule.setScore(score);
        rule.setExpression(expression);
        return rule;
    }

    public Variable newVariable(final String identifier, final String type, final String cardinality) {
        final Variable variable = new Variable();
        variable.setIdentifier(identifier);
        variable.setType(type);
        variable.setCardinality(cardinality);
        return variable;
    }

    public AndExpression newAndExpression() {
        final AndExpression expression = new AndExpression();
        expression.addExpression(newCustomEqIsEquivalentExpression());

        final CustomEqIsEquivalentExpression eqExpression = newCustomEqIsEquivalentExpression();
        eqExpression.setExemplar("3+6");
        eqExpression.setObject("answerLine2");
        eqExpression.setSimplify(true);

        expression.addExpression(eqExpression);

        return expression;
    }

    public BaseValueExpression newBaseValueExpression() {
        return newBaseValueExpression("string", "Kentucky");
    }

    public BaseValueExpression newBaseValueBooleanExpression() {
        return newBaseValueExpression("boolean", "true");
    }

    public BaseValueExpression newBaseValueIntegerExpression() {
        return newBaseValueExpression("integer", "11");
    }

    public BaseValueExpression newBaseValueFloatExpression() {
        return newBaseValueExpression("float", "3.14");
    }

    public BaseValueExpression newBaseValueExpression(final String type, final String value) {
        final BaseValueExpression expression = new BaseValueExpression();
        expression.setType(type);
        expression.setValue(value);
        return expression;
    }

    public ContainerSizeExpression newContainerSizeExpression() {
        return newContainerSizeExpression(newBaseValueExpression());
    }

    public ContainerSizeExpression newContainerSizeExpression(final Expression expression) {
        final ContainerSizeExpression containerSizeExpression = new ContainerSizeExpression();
        containerSizeExpression.setExpression(expression);
        return containerSizeExpression;
    }

    public DivideExpression newDivideExpression() {
        final DivideExpression expression = new DivideExpression();
        expression.setExpression1(newBaseValueIntegerExpression());
        expression.setExpression2(newBaseValueIntegerExpression());
        return expression;
    }

    public EqualExpression newEqualExpression() {
        return newEqualExpression(newBaseValueIntegerExpression(), newBaseValueIntegerExpression());
    }

    public EqualExpression newEqualExpression(final Expression expression1, final Expression expression2) {
        final EqualExpression expression = new EqualExpression();
        expression.setExpression1(expression1);
        expression.setExpression2(expression2);
        return expression;
    }

    public GteExpression newGteExpression() {
        final GteExpression expression = new GteExpression();
        expression.setExpression1(newBaseValueIntegerExpression());
        expression.setExpression2(newBaseValueIntegerExpression());
        return expression;
    }

    public GtExpression newGtExpression() {
        final GtExpression expression = new GtExpression();
        expression.setExpression1(newBaseValueIntegerExpression());
        expression.setExpression2(newBaseValueIntegerExpression());
        return expression;
    }

    public IndexExpression newIndexExpression() {
        final IndexExpression expression = new IndexExpression();
        expression.setExpression(newVariableExpression());
        expression.setIndex(1);
        return expression;
    }

    public IntegerToFloatExpression newIntegerToFloatExpression() {
        final IntegerToFloatExpression expression = new IntegerToFloatExpression();
        expression.setExpression(newBaseValueIntegerExpression());
        return expression;
    }

    public InsideExpression newInsideExpression() {
        final InsideExpression expression = new InsideExpression();
        expression.setShape("rect");
        expression.setCoordinates("183,238,211,214");
        expression.setExpression(newBaseValueIntegerExpression());
        return expression;
    }

    public LteExpression newLteExpression() {
        final LteExpression expression = new LteExpression();
        expression.setExpression1(newBaseValueIntegerExpression());
        expression.setExpression2(newBaseValueIntegerExpression());
        return expression;
    }

    public LtExpression newLtExpression() {
        final LtExpression expression = new LtExpression();
        expression.setExpression1(newBaseValueIntegerExpression());
        expression.setExpression2(newBaseValueIntegerExpression());
        return expression;
    }

    public OrExpression newOrExpression() {
        final OrExpression expression = new OrExpression();
        expression.addExpression(newBaseValueExpression());
        expression.addExpression(newBaseValueExpression());
        return expression;
    }

    public ProductExpression newProductExpression() {
        final ProductExpression expression = new ProductExpression();
        expression.addExpression(newBaseValueIntegerExpression());
        expression.addExpression(newBaseValueIntegerExpression());
        return expression;
    }

    public StringMatchExpression newStringMatchExpression(final boolean caseSensitive) {
        final StringMatchExpression expression = new StringMatchExpression();
        expression.setCaseSensitive(caseSensitive);
        expression.setExpression1(newBaseValueIntegerExpression());
        expression.setExpression2(newBaseValueIntegerExpression());
        return expression;
    }

    public SubtractExpression newSubtractExpression() {
        final SubtractExpression expression = new SubtractExpression();
        expression.setExpression1(newBaseValueIntegerExpression());
        expression.setExpression2(newBaseValueIntegerExpression());
        return expression;
    }

    public SumExpression newSumExpression() {
        final SumExpression expression = new SumExpression();
        expression.addExpression(newVariableExpression());
        expression.addExpression(newBaseValueIntegerExpression());
        return expression;
    }

    public TruncateExpression newTruncateExpression() {
        final TruncateExpression expression = new TruncateExpression();
        expression.setExpression(newBaseValueFloatExpression());
        return expression;
    }

    public VariableExpression newVariableExpression() {
        return newVariableExpression("answerLine1");
    }

    public VariableExpression newVariableExpression(final String identifier) {
        final VariableExpression expression = new VariableExpression();
        expression.setIdentifier(identifier);
        return expression;
    }

    public CustomEqEvaluateExpression newCustomEqEvaluateExpression() {
        final CustomEqEvaluateExpression expression = new CustomEqEvaluateExpression();
        expression.setObject("answerLine1");
        return expression;
    }

    public CustomEqExpressionContainsExpression newCustomEqExpressionContainsExpression() {
        final CustomEqExpressionContainsExpression expression = new CustomEqExpressionContainsExpression();
        expression.setObject("answerLine1");
        expression.setValue("To be or not to be");
        return expression;
    }

    public CustomEqGetEquationsCountExpression newCustomEqGetEquationsCountExpression() {
        final CustomEqGetEquationsCountExpression expression = new CustomEqGetEquationsCountExpression();
        expression.setObject("answerLine1");
        return expression;
    }

    public CustomEqGetInequalitiesCountExpression newCustomEqGetInequalitiesCountExpression() {
        final CustomEqGetInequalitiesCountExpression expression = new CustomEqGetInequalitiesCountExpression();
        expression.setObject("answerLine1");
        return expression;
    }

    public CustomEqIsEmptyExpression newCustomEqIsEmptyExpression() {
        final CustomEqIsEmptyExpression expression = new CustomEqIsEmptyExpression();
        expression.setObject("answerLine1");
        return expression;
    }

    public CustomEqIsEquivalentExpression newCustomEqIsEquivalentExpression() {
        return newCustomEqIsEquivalentExpression("9", "answerLine1", true);
    }

    public CustomEqIsEquivalentExpression newCustomEqIsEquivalentExpression(final String exemplar, final String object, final boolean simplify) {
        final CustomEqIsEquivalentExpression expression = new CustomEqIsEquivalentExpression();
        expression.setExemplar(exemplar);
        expression.setObject(object);
        expression.setSimplify(simplify);
        return expression;
    }

    public CustomEqIsEquivalentLogExpression newCustomEqIsEquivalentLogExpression() {
        final CustomEqIsEquivalentLogExpression expression = new CustomEqIsEquivalentLogExpression();
        expression.setAssumptions(true);
        expression.setExemplar("this is an exemplar response");
        expression.setObject("answerLine1");
        return expression;
    }

    public CustomEqIsEquivalentTrigExpression newCustomEqIsEquivalentTrigExpression() {
        final CustomEqIsEquivalentTrigExpression expression = new CustomEqIsEquivalentTrigExpression();
        expression.setExemplar("this is an exemplar response");
        expression.setObject("answerLine1");
        return expression;
    }

    public CustomEqIsMatchExpression newCustomEqIsMatchExpression() {
        final CustomEqIsMatchExpression expression = new CustomEqIsMatchExpression();
        expression.setConstraints("a < 1 && b > 5");
        expression.setObject("answerLine1");
        expression.setParameters("a,b");
        expression.setPattern("sum(a,b*2)");
        expression.setSimplify(true);
        expression.setVariables("a,b");
        return expression;
    }

    public CustomEqLineContainsExpression newCustomEqLineContainsExpression() {
        final CustomEqLineContainsExpression expression = new CustomEqLineContainsExpression();
        expression.setExemplar("this is an exemplar response");
        expression.setObject("answerLine1");
        expression.setSimplify(true);
        return expression;
    }

    public CustomEqMatchExpression newCustomEqMatchExpression() {
        final CustomEqMatchExpression expression = new CustomEqMatchExpression();
        expression.setConstraints("a < 1 && b > 5");
        expression.setObject("answerLine1");
        expression.setParameters("a,b");
        expression.setPattern("sum(a,b*2)");
        expression.setSimplify(true);
        expression.setVariables("a,b");
        return expression;
    }

    public CustomEqNumberFromExpressionExpression newCustomEqNumberFromExpression() {
        final CustomEqNumberFromExpressionExpression expression = new CustomEqNumberFromExpressionExpression();
        expression.setObject("answerLine1");
        return expression;
    }

    public CustomCountBoolExpression newCustomCountBoolExpression() {
        final CustomCountBoolExpression expression = new CustomCountBoolExpression();
        expression.setList("true,false,false,true");
        expression.setBooleanValue(true);
        return expression;
    }

    public CustomCountDoubleInRangeExpression newCustomCountDoubleInRangeExpression() {
        final CustomCountDoubleInRangeExpression expression = new CustomCountDoubleInRangeExpression();
        expression.setList("1,3,5,7,9");
        expression.setMax(11D);
        expression.setMin(3D);
        return expression;
    }

    public CustomMapExpressionExpression newCustomMapExpressionExpression() {
        return newCustomMapExpressionExpression("1,2,3", newBaseValueExpression());
    }

    public CustomMapExpressionExpression newCustomMapExpressionExpression(final String container, final Expression expression) {
        final CustomMapExpressionExpression mapExpression = new CustomMapExpressionExpression();
        mapExpression.setContainer(container);
        mapExpression.setExpression(expression);
        return mapExpression;
    }

    public CustomMaxIntExpression newCustomMaxIntExpression() {
        final CustomMaxIntExpression expression = new CustomMaxIntExpression();
        expression.setList("2,4,6,8");
        return expression;
    }

    public CustomMinIntExpression newCustomMinIntExpression() {
        final CustomMinIntExpression expression = new CustomMinIntExpression();
        expression.setList("2,4,6,8");
        return expression;
    }

    public CustomStringToFloatExpression newCustomStringToFloatExpression() {
        final CustomStringToFloatExpression expression = new CustomStringToFloatExpression();
        expression.setExpression(newBaseValueIntegerExpression());
        return expression;
    }

    public CustomGiCountSidesExpression newCustomGiCountSidesExpression() {
        final CustomGiCountSidesExpression expression = new CustomGiCountSidesExpression();
        expression.setObject("@");
        return expression;
    }
    public CustomGiGetPointExpression newCustomGiGetPointExpression(final String pointIndex) {
        final CustomGiGetPointExpression expression = new CustomGiGetPointExpression();
        expression.setObject("@");
        expression.setPointIndex(pointIndex);
        return expression;
    }

    public CustomGiGetLengthExpression newCustomGiGetLengthExpression() {
        final CustomGiGetLengthExpression expression = new CustomGiGetLengthExpression();
        expression.setVector("@");
        return expression;
    }

    public CustomGiGetNameExpression newCustomGiGetNameExpression() {
        final CustomGiGetNameExpression expression = new CustomGiGetNameExpression();
        expression.setObject("@");
        return expression;
    }

    public CustomGiGetSelectedRegionCountExpression newCustomGiGetSelectedRegionCountExpression() {
        final CustomGiGetSelectedRegionCountExpression expression = new CustomGiGetSelectedRegionCountExpression();
        expression.setRegionGroup("regionGroupAnswer1");
        return expression;
    }

    public CustomGiGetSlopeExpression newCustomGiGetSlopeExpression() {
        final CustomGiGetSlopeExpression expression = new CustomGiGetSlopeExpression();
        expression.setVector("@");
        return expression;
    }

    public CustomGiGetVectorExpression newCustomGiGetVectorExpression() {
        final CustomGiGetVectorExpression expression = new CustomGiGetVectorExpression();
        expression.setObject("@");
        expression.setOrder("descending");
        return expression;
    }

    public CustomGiHasVertexExpression newCustomGiHasVertexExpression() {
        final CustomGiHasVertexExpression expression = new CustomGiHasVertexExpression();
        expression.setObject("@");
        expression.setTolerance(".5");
        return expression;
    }

    public CustomGiIntersectPointExpression newCustomGiIntersectPointExpression() {
        final CustomGiIntersectPointExpression expression = new CustomGiIntersectPointExpression();
        expression.setObject("@");
        expression.setX("5");
        expression.setY("10");
        expression.setTolerance(".5");
        return expression;
    }

    public CustomGiIntersectRegionExpression newCustomGiIntersectRegionExpression() {
        final CustomGiIntersectRegionExpression expression = new CustomGiIntersectRegionExpression();
        expression.setObject("@");
        expression.setTopY("1");
        expression.setBottomY("20");
        expression.setLeftX("5");
        expression.setRightX("25");
        return expression;
    }

    public CustomGiIsGraphicTypeExpression newCustomGiIsGraphicTypeExpression() {
        final CustomGiIsGraphicTypeExpression expression = new CustomGiIsGraphicTypeExpression();
        expression.setObject("@");
        expression.setGraphicType("POINT");
        return expression;
    }

    public CustomGiIsRegionSelectedExpression newCustomGiIsRegionSelectedExpression() {
        final CustomGiIsRegionSelectedExpression expression = new CustomGiIsRegionSelectedExpression();
        expression.setRegion("regionName");
        return expression;
    }

    public Asl getTestAsl(String itemId) {
        Asl asl = new Asl();
        asl.setAslProvided(true);
        asl.setAslRequired("true");

        List<Attachment> aslAttach = new ArrayList<>();

        Attachment attach1 = new Attachment();
        attach1.setFileName(String.format("item_%s_ASL1_STEM.mp4", itemId));
        attach1.setUploadedDate(new Date());
        aslAttach.add(attach1);

        Attachment attach2 = new Attachment();
        attach2.setFileName(String.format("item_%s_ASL2_STEM.webm", itemId));
        attach2.setUploadedDate(new Date());
        aslAttach.add(attach2);

        Attachment attach3 = new Attachment();
        attach3.setFileName(String.format("item_%s_ASL3_STEM.mp4", itemId));
        attach3.setUploadedDate(new Date());
        aslAttach.add(attach3);

        asl.setAttachments(aslAttach);

        return asl;
    }

    public Braille getTestBraille(String itemId) {
        Braille braille = new Braille();
        braille.setBrailleProvided(true);
        braille.setBrailleRequired("true");

        List<Attachment> brailleAttach = new ArrayList<>();

        Attachment attach1 = new Attachment();
        attach1.setFileName(String.format("item_%s_enu_ecl.brf", itemId));
        attach1.setUploadedDate(new Date());
        brailleAttach.add(attach1);

        Attachment attach2 = new Attachment();
        attach2.setFileName(String.format("item_%s_enu_uxl.prn", itemId));
        attach2.setUploadedDate(new Date());
        brailleAttach.add(attach2);

        Attachment attach3 = new Attachment();
        attach3.setFileName(String.format("item_%s_enu_ect.brf", itemId));
        attach3.setUploadedDate(new Date());
        brailleAttach.add(attach3);

        braille.setAttachments(brailleAttach);

        return braille;
    }



    public ItemBankUser getUserWithRoles(String username, String fullName) {
        ItemBankUser user = new ItemBankUser(username, fullName);
        return user;
    }

    public String getPromptWithMathMl() {
        return "<p>First sentence</p><p>Second sentence</p><p>Third sentence</p><p>&nbsp;" +
                "</p><p>&nbsp;</p><p>&nbsp;</p><ol><li>First option</li><li>Second option</li><li>Third option</li></ol>" +
                "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo>" +
                "<mi>y</mi></mrow><mrow><mn>1</mn><mo>+</mo><mn>2</mn><msup><mi>z</mi><mn>2</mn></msup></mrow></mfrac></math><br/>" +
                "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo>" +
                "<mi>y</mi></mrow><mrow><mn>1</mn><mo>+</mo><mn>2</mn><msup><mi>z</mi><mn>2</mn></msup></mrow></mfrac></math>";
    }

    public String getPromptWithHtmlTable() {
        return "<table cellpadding=\"5\" cellspacing=\"5\" border=\"2\" style=\"height:200px;width:500px;\" summary=\"summary\" align=\"center\" id=\"id1\">\n" +
                "  <tbody>\n" +
                "    <tr>\n" +
                "      <td style=\"text-align: left; vertical-align: top; width: 30px; height: 20px; background-color: blue; border-color: red;\">b</td>\n" +
                "      <td style=\"text-align: left; vertical-align: top; width: 30px; height: 20px; background-color: blue; border-color: red;\">d</td>\n" +
                "    </tr>\n" +
                "  </tbody>\n" +
                "</table>";
    }

    public String getPromptWithTts() {
        return "<p><img class=\"place-holder iat-text2speech\" title=\"Image Resource 1\" data-iat-image-resource-id=\"1\" data-iat-tts=\"image 1 tts\" data-iat-tts-vi=\"image 1 tts vi\" " +
                "data-iat-tts-alt-text=\"image 2 alt text\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p>&nbsp;</p><p><img class=\"place-holder iat-text2speech\" " +
                "title=\"Image Resource 2\" data-iat-image-resource-id=\"2\" data-iat-tts=\"image 2 tts\" data-iat-tts-vi=\"image 2 tts vi\" data-iat-tts-alt-text=\"image 2 alt-text\" " +
                "src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-02.png\" /></p><p>&nbsp;</p><p><img class=\"place-holder iat-text2speech\" title=\"Image Resource 3\" " +
                "data-iat-image-resource-id=\"3\" data-iat-tts=\"image 3 tts\" data-iat-tts-vi=\"image 3 tts vi\" data-iat-tts-alt-text=\"image 3 alt-text\" " +
                "src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-03.png\" /></p><p>&nbsp;</p><p><span class=\"iat-text2speech\" data-iat-tts=\"the boy\" " +
                "data-iat-tts-vi=\"the boy vi\" data-iat-tts-alt-text=\"\">The boy became silent</span>, having no reply to so sensible a speech, and soon both were fully " +
                "occupied in staring at the strange scenes spread out below them. &nbsp;<span class=\"iat-text2speech\" data-iat-tts=\"second tts\" data-iat-tts-vi=\"second tts vi\" " +
                "data-iat-tts-alt-text=\"\">They seemed to be falling</span> right into the middle of a big city which had many tall buildings with glass domes and sharp-pointed spires. " +
                "&nbsp;These spires were like great spear-points, <span class=\"iat-text2speech\" data-iat-tts=\"third tts\" data-iat-tts-vi=\"third tts vi\" " +
                "data-iat-tts-alt-text=\"\">and if they tumbled</span> upon one of them they were likely to suffer serious injury.</p>";
    }

    public List<String> getSampleRubrics() {
        return new ArrayList<>(Arrays.asList("Rubric for 0 points", "Rubric for 1 points", "Rubric for 2 points"));
    }

    public List<String> getExemplarResponses() {
        return new ArrayList<>(Arrays.asList("First Exemplar", "Second Exemplar"));
    }

    public ItemMetadata updateMetadata(ItemMetadata metadata) {
        metadata.setSubject("");
        metadata.setPrimaryClaim("1");
        metadata.setPrimaryContentDomain("NS");
        metadata.setPrimaryTarget("A");
        metadata.setPrimaryTargetSet("TS01");
        metadata.setPrimaryEmphasis("m");
        metadata.setPrimaryCommonCoreStandard("6.ND.6c");
        metadata.setTestCategory("Practice");

        return metadata;
    }

    public List<GlossaryTerm> getGlossaryTermsInSequence(int termCount) {
        List<GlossaryTerm> glossaryTerms = new ArrayList<>();

        for (int i=0; i < termCount; i++) {
            GlossaryTerm term = new GlossaryTerm();
            term.setId(Integer.toString(i+1));
            term.setTerm(String.format("term %s", i));
            term.setDescription(String.format("A business %s", i));
            term.setIllustrationImageResourceId(Integer.toString(i));

            term.getLanguages().getEnglish().getDialects().add(new GlossaryDialect("1", "English"));
            term.getLanguages().getEnglish().getDialects().get(0).setAudioFiles(getTestFiles(2));

            term.getLanguages().getSpanish().getDialects().add(new GlossaryDialect("1", "Español México"));
            term.getLanguages().getSpanish().getDialects().get(0).setAudioFiles(getTestFiles(2));

            term.getLanguages().getArabic().getDialects().add(new GlossaryDialect("1", "تستخد"));
            term.getLanguages().getArabic().getDialects().get(0).setAudioFiles(getTestFiles(1));
            term.getLanguages().getArabic().getDialects().add(new GlossaryDialect("2", "تستخد"));
            term.getLanguages().getArabic().getDialects().get(1).setAudioFiles(getTestFiles(2));

            term.getLanguages().getPunjabi().getDialects().add(new GlossaryDialect("1", "چوڑا"));
            term.getLanguages().getPunjabi().getDialects().add(new GlossaryDialect("2", "ਚੌੜਾ"));

            term.getLanguages().getVietnamese().getDialects().add(new GlossaryDialect("1", "người quản lý"));
            term.getLanguages().getVietnamese().getDialects().add(new GlossaryDialect("2", "nhà quản lý"));

            GlossaryDialect definitionNullAudio = new GlossaryDialect();
            definitionNullAudio.setId("1");
            definitionNullAudio.setDefinition("Definition with no audio");

            term.getLanguages().getBurmese().getDialects().add(definitionNullAudio);
            term.getLanguages().getCantonese().getDialects().add(definitionNullAudio);

            glossaryTerms.add(term);
        }

        return glossaryTerms;
    }

    public List<GlossaryTerm> getGlossaryTermsOutOfSequence(int termCount) {
        List<GlossaryTerm> glossaryTerms = new ArrayList<>();

        for (int i=0; i < termCount; i++) {
            GlossaryTerm term = new GlossaryTerm();
            int termId = (i+1) * 2;

            term.setId(Integer.toString(termId));
            term.setTerm(String.format("term %s", termId));
            term.setDescription(String.format("A business %s", termId));
            term.setIllustrationImageResourceId(Integer.toString(termId));

            term.getLanguages().getEnglish().getDialects().add(new GlossaryDialect("1", "English"));
            term.getLanguages().getEnglish().getDialects().get(0).setAudioFiles(getTestFiles(2));

            term.getLanguages().getSpanish().getDialects().add(new GlossaryDialect("1", "Español México"));
            term.getLanguages().getSpanish().getDialects().get(0).setAudioFiles(getTestFiles(2));

            term.getLanguages().getArabic().getDialects().add(new GlossaryDialect("1", "تستخد"));
            term.getLanguages().getArabic().getDialects().get(0).setAudioFiles(getTestFiles(1));
            term.getLanguages().getArabic().getDialects().add(new GlossaryDialect("2", "تستخد"));
            term.getLanguages().getArabic().getDialects().get(1).setAudioFiles(getTestFiles(2));

            term.getLanguages().getPunjabi().getDialects().add(new GlossaryDialect("1", "چوڑا"));
            term.getLanguages().getPunjabi().getDialects().add(new GlossaryDialect("2", "ਚੌੜਾ"));

            term.getLanguages().getVietnamese().getDialects().add(new GlossaryDialect("1", "người quản lý"));
            term.getLanguages().getVietnamese().getDialects().add(new GlossaryDialect("2", "nhà quản lý"));

            GlossaryDialect definitionNullAudio = new GlossaryDialect();
            definitionNullAudio.setId("1");
            definitionNullAudio.setDefinition("Definition with no audio");

            term.getLanguages().getBurmese().getDialects().add(definitionNullAudio);
            term.getLanguages().getCantonese().getDialects().add(definitionNullAudio);

            glossaryTerms.add(term);
        }

        return glossaryTerms;
    }


    public List<Attachment> getTestFiles(int fileCount) {

        List<Attachment> attachments = new ArrayList<>();

        for (int i=0; i < fileCount; i++) {
            Attachment attach1 = new Attachment();
            attach1.setFileName("testfile_" + i +  ".MP4");
            attach1.setUploadedDate(new Date());
            attachments.add(attach1);
        }

        return attachments;
    }

    public ItemPatchRequest newPatchRequestCoreEnPrompt() {
        ItemPatchRequest request = new ItemPatchRequest();
        request.setItemId(ITEM_ID);
        request.setMessage("Patching item");
        request.setFieldPath("core.en.prompt");
        request.setOldValue(PROMPT);
        request.setNewValue("Patched " + PROMPT);
        return request;
    }

    public String getPromptWithGlossaryAndTTS() {
        return "<p>&nbsp;</p><p><span class=\"iat-text2speech\" data-iat-tts=\"only\">TTS Only</span></p><p>&nbsp;</p><p><span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"1\">Glossary Only</span></p><p>&nbsp;</p><p><span class=\"iat-glossary-term iat-text2speech\" data-iat-glossary-term-id=\"1\" data-iat-tts=\"both\">TTS and Glossary</span></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p><span class=\"iat-text2speech\" data-iat-tts=\"asdsda\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>x</mi><mo>=</mo><mroot><mrow><mn>3</mn><mo>&#160;</mo></mrow><mn>2</mn></mroot><mo>-</mo><mo>&#160;</mo><mn>3</mn><mi>y</mi></math></span></p><p>&nbsp;</p><p><span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"1\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>e</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></math></span></p><p>&nbsp;</p><p><span class=\"iat-glossary-term iat-text2speech\" data-iat-glossary-term-id=\"2\" data-iat-tts=\"wwwwwwwww\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mi>y</mi><mo>=</mo><mo>&#160;</mo><mfrac><msqrt><mn>3</mn></msqrt><msup><mi>x</mi><mn>2</mn></msup></mfrac></math></span></p><p>&nbsp;</p><p>&nbsp;</p><p><img class=\"place-holder iat-text2speech\" data-iat-image-resource-id=\"1\" data-iat-tts=\"asdsads\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-01.png\" /></p><p>&nbsp;</p><p><img class=\"place-holder\" title=\"Image Resource 2\" data-iat-image-resource-id=\"2\" src=\"/assets/ckeditor/plugins/iatimage/icons/image-place-02.png\" /></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>";
    }

    public String getPromptWithGlossaryInSequence() {
        return "<p<>span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"1\">Glossary One</span></p><p<>span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"2\">Glossary Two</span></p>";
    }

    public String getPromptWithGlossaryOutOfSequence() {
        return "<p<>span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"2\">Glossary Two</span></p><p<>span class=\"iat-glossary-term\" data-iat-glossary-term-id=\"4\">Glossary Four</span></p>";
    }

    public String getPromptWithAllFontSizes() {
        return "<p><span style=\"font-size:8px;\">8</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:9px;\">9</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:10px;\">10</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:11px;\">11</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:12px;\">12</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:14px;\">14</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:16px;\">16</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:18px;\">18</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:20px;\">20</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:22px;\">22</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:24px;\">24</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:26px;\">26</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:28px;\">28</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:36px;\">36</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:48px;\">48</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:72px;\">72</span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<table cellpadding=\"1\" cellspacing=\"1\" border=\"1\" style=\"width: 500px;\">\n" +
                "  <tbody>\n" +
                "    <tr>\n" +
                "      <td><span style=\"font-size:8px;\">8</span></td>\n" +
                "      <td><span style=\"font-size:9px;\">9</span></td>\n" +
                "      <td><span style=\"font-size:10px;\">10</span></td>\n" +
                "    </tr>\n" +
                "    <tr>\n" +
                "      <td><span style=\"font-size:11px;\">11</span></td>\n" +
                "      <td><span style=\"font-size:12px;\">12</span></td>\n" +
                "      <td><span style=\"font-size:14px;\">14</span></td>\n" +
                "    </tr>\n" +
                "  </tbody>\n" +
                "</table>\n" +
                "<p>&nbsp;</p>\n" +
                "<ol>\n" +
                "  <li><span style=\"font-size:16px;\">Sixteen</span></li>\n" +
                "  <li><span style=\"font-size:18px;\">Eighteen</span></li>\n" +
                "  <li><span style=\"font-size:20px;\">Twenty</span></li>\n" +
                "</ol>\n" +
                "<p>&nbsp;</p>\n" +
                "<p><span style=\"font-size:22px;\"><em>Twenty Two</em></span></p>\n" +
                "<p><span style=\"font-size:24px;\"><em>Twenty Four</em></span></p>\n" +
                "<p><span style=\"font-size:26px;\"><em>Twenty Six</em></span></p>\n" +
                "<p>&nbsp;</p>\n" +
                "<p>&nbsp;</p>";
    }
}
